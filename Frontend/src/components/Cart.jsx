import React, { useEffect } from "react";
import Navbar from "./Navbar";
import cartpic from "../../public/cart.png";
import trolley from "../../public/trolley.png";
import CartCards from "./CartCards";
import { useSelector, useDispatch } from "react-redux";
import { removeCartItems } from "../redux/counter/emptyCartSlice.js";
import axios from "axios";
import { useForm } from "react-hook-form";
import toast from "react-hot-toast";
import Footer from "./Footer";


const Cart = () => {
  //using redux
  const boughtItems = useSelector((state) => state.cartItems.purchasedItems);
  const dispatch = useDispatch();
  console.log("Bought Items from Redux State:", boughtItems);
  //email to add in boughtitem
  const currEmail = useSelector((state) => state.email.currEmail);
  console.log(currEmail);
  //Empty cart by sending prop to cartCards to empty the cart if false the don't do it if true then yes
  useEffect(() => {
    setTimeout(() => {
      dispatch(removeCartItems({ emptyCart: false })); // send to redux store
    }, 1000);
  }, [boughtItems]);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm();

  const onSubmit = async (data) => {
    setTimeout(() => {
      dispatch(removeCartItems({ emptyCart: true })); // send to redux store
    }, 1000);

    console.log(currEmail);

    const location = data.location;
    const today = new Date();

    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, "0"); //January is 0!
    const dd = String(today.getDate()).padStart(2, "0");

    const formattedDate = yyyy + "-" + mm + "-" + dd;

    console.log(formattedDate); // Output: 2024-07-21 (assuming today is July 21, 2024)
  
    //boughtItems are unextensgible so create a shallow copy of it so that the code can work
    const dataToSend = boughtItems.map((item) => ({
      ...item,
      location: location,
      email: currEmail,
      date: formattedDate,
    }));
    // this id is generated by mongodb to distinguish between the similar datas so if multiple users purchased item have
    // the same -id then it would be problematic so delete it here and then after the data is saved in data base
    //mongodb will create a unique id fro every item again
    dataToSend.forEach((obj) => delete obj._id);
    console.log("view this:");
    console.log(dataToSend);
    // sending post rquest to send data to the backend
    try {
      const res = await axios.post(
        "http://localhost:3000/history/",
        dataToSend
      );
      console.log("DATA DJKNJKRENJENTBNBJNJEBNOETBJIOETBJEOBNTJJJJJJJJJJN");
      console.log(res.data);
    } catch (error) {
      console.log("error while sending purchase history");
      console.log(error);
    }
    toast.success("Order Complete! Your purchase will be delivered soon!");
  };

  return (
    <>
      <div className="flex flex-col">
        <Navbar />

        <div className="max-w-screen-2xl container mx-auto md:px-20 px-4 flex flex-col md:flex-row py-20 md:py-32 gap-10 justify-center items-center ">
          <div className="w-full md:w-1/2 md:order-1 order-2">
            <div className="space-y-12">
              <h1 className="text-4xl font-bold">
                All your items are in{" "}
                <span className="text-purple-500">Cart!</span>
              </h1>
              <p className="text-xl">To get the items confirm the purchase</p>
              <form onSubmit={handleSubmit(onSubmit)}>
                <label className="input input-bordered flex items-center gap-2  dark:bg-slate-900 bg-white border-black dark:border-white">
                  <img className="w-10 " src={trolley} />

                  <input
                    type="text"
                    {...register("location", {
                      required: true,
                      errors: "This field is required",
                    })}
                    className="grow text-black placeholder:text-black dark:placeholder:text-white dark:text-white"
                    placeholder="Location Address!"
                  />
                </label>
                <div className="flex flex-col ">
                  {errors.location && (
                    <span className="text-red-500 z-10 mt-5">
                      Location address is required!
                    </span>
                  )}
                  <button
                    type="submit"
                    className="btn btn-active btn-secondary mt-6 w-20"
                  >
                    Confirm
                  </button>
                </div>
              </form>
            </div>
          </div>

          <div className="w-full md:w-1/2 flex md:justify-end justify-center order-1 md:order2">
            <img
              src={cartpic}
              className="lg:w-[600px] lg:h-[500px] w-[400px] h-[400px]"
            />
          </div>
        </div>
      </div>

      <CartCards />
      <Footer />
    </>
  );
};

export default Cart;
